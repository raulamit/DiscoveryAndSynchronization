---
openapi: 3.0.2
info:
  title: UTM API (USS->DSS and USS->USS)
  version: 0.3.1
  description: |-
    Interface definitions for 'Discovery and Synchronization Service' (DSS) and 'UAS Service Supplier (USS).

    DSS functionality includes identification of peer UTM USS instances (managing flight operations and constraints).
    USS functionality includes sharing details of flight operations and constraints.

    Note: Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.

security:
- Authority:
  - utm.strategic_coordination
  - utm.constraint_management
  - utm.constraint_consumption

tags:
- name: "Operation references"
  description: |-
    Endpoints exposed by the DSS for interaction with references to Operations.
- name: "Operation details"
  description: |-
    Endpoints exposed by USSs for interaction with details of Operations.
- name: "Constraint references"
  description: |-
    Endpoints exposed by the DSS for interaction with references to Constraints.
- name: "Constraint details"
  description: |-
    Endpoints exposed by USSs for interaction with details of Constraints.
- name: "Subscriptions"
  description: |-
    Endpoints exposed by the DSS for interaction with Subscription entities.
- name: "Reports"
  description: |-
    Endpoints exposed by the DSS for reporting peer DSS issues.
- name: dss
  description: Endpoints exposed by the DSS server.
- name: p2p_utm
  description: Endpoints exposed by UTM USSs for peer-peer communication.

components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://token_vendor.com/oauth/token
          scopes:
            utm.strategic_coordination: |-
              Client may perform planning, strategic conflict detection, and conformance monitoring activities, including reading information about Constraints.
            utm.constraint_management: |-
              Client may manage (create, edit, and delete) Constraints they own.
            utm.constraint_consumption: |-
              Client may read Constraints from the DSS (references) and partner USSs (details).
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, publish to all providers the public key for verifying that signature, and implement standard OAuth server discovery mechanisms as described in RFC 8414.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
            * `iss`, with the URL at which the token generation request was received.
            * `exp`, with a time no further than 1 hour in the future.
            * `sub`, with unique ID of the client requesting the access token.
            * `scope`, with an array of strings indicating the scopes granted.
            * `jti`, according to RFC 7519.

        Only one scope shall be granted for a token.  The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.


  schemas:
    UUIDv4:
      description: |-
        Universally-unique identifier (version 4).
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        '^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$'
      example: '03e5572a-f733-49af-bc14-8a18bd53ee39'

    EntityUUID:
      description: |-
        Universally-unique identifier for an Entity communicated through
        the DSS.  Formatted as UUIDv4.
      $ref: '#/components/schemas/UUIDv4'
      example: '2f8343be-6482-4d1b-a474-16847e01af1e'

    EntityOVN:
      title: EntityOVN
      description: |-
        A token associated with a particular UTM Entity+version created
        by the DSS upon creation or modification of an Entity reference and provided
        to the client creating or modifying the Entity reference.  The EntityOVN
        is stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntityOVN is also provided by
        the client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      type: string
      minLength: 16
      maxLength: 128
      example: '9d158f59-80b7-4c11-9c0c-8a2b4d936b2d'

    SubscriptionUUID:
      description: |-
        Universally-unique identifier for a Subscription communicated through
        the DSS.  Formatted as UUIDv4.
      $ref: '#/components/schemas/UUIDv4'
      example: '78ea3fe8-71c2-4f5c-9b44-9c02f5563c6f'

    Key:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write operations to the DSS occur only when the latest content is known (i.e. has been read). The client is required to pass a current Key constructed from information obtained with previous read operations and subsequent requests for full information, and optionally, subscription updates for deconflicted write operations to the DSS.  The contents of this data structure are generated by the client.
      type: array
      items:
        $ref: '#/components/schemas/EntityOVN'
      default: []

    Time:
      required:
      - value
      - format
      type: object
      properties:
        value:
          type: string
          description: RFC3339-formatted time/date string.  The time zone must be 'Z'.
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
        format:
          type: string
          enum:
          - RFC3339

    CircleProperties:
      required:
      - radius
      type: object
      properties:
        radius:
          $ref: '#/components/schemas/Radius'

    Radius:
      required:
      - value
      - units
      type: object
      properties:
        value:
          format: float
          description: Distance from the centerpoint of a circular area, along the WGS84 ellipsoid.
          type: number
          example: 300.183
        units:
          type: string
          description: FIXM-compatible units.  Only meters ("M") are acceptable for UTM.
          enum:
          - M

    Altitude:
      type: object
      required:
      - value
      - reference
      - units
      properties:
        value:
          description: |-
            The numeric value of the altitude. Note that min and max values are
            added as a sanity check. As use cases evolve and more options are
            made available in terms of units of measure or reference systems,
            these bounds should be re-evaluated.
          type: number
          format: double
          minimum: -8000
          exclusiveMinimum: false
          maximum: 100000
          exclusiveMaximum: false
        reference:
          description: |-
            A code indicating the reference for a vertical distance. See AIXM 5.1
            and FIXM 4.2.0. Currently, UTM only allows WGS84 with no immediate
            plans to allow other options. FIXM and AIXM allow for 'SFC' which is
            equivalent to AGL.
          type: string
          enum:
          - W84
        units:
          description: |-
            The reference quantities used to express the value of altitude. See
            FIXM 4.2. Currently, UTM only allows meters with no immediate plans
            to allow other options.
          type: string
          enum:
          - M

    Latitude:
      description: Degrees of latitude north of the equator, with reference to the WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      format: double
      example: 34.123

    Longitude:
      description: Degrees of longitude east of the Prime Meridian, with reference to the WGS84 ellipsoid.
      minimum: -180
      exclusiveMaximum: false
      maximum: 180
      exclusiveMinimum: false
      type: number
      format: double
      example: -118.456

    LongitudeOrLatitude:
      description: |-
        Longitude (degrees east of the Prime Meridian or degrees, with reference to the WGS84 ellipsoid) or Latitude
        (degrees north of the equator, with reference to the WGS84 ellipsoid).
      minimum: -180
      exclusiveMinimum: false
      maximum: 180
      exclusiveMaximum: false
      type: number
      format: double
      example: 12.34

    LonLatPair:
      description: Longitude/Latitude pair (in that order) used for specifying geographical vertex. Specified as an array. Order is important!
      type: array
      maxItems: 2
      minItems: 2
      items:
        $ref: '#/components/schemas/LongitudeOrLatitude'
      example: [-122.106325, 47.660898]

    #
    # GeoJSON definitions
    #

    # Original version: https://gist.github.com/bubbobne/fe5f2db65acf039be6a9fd92fc9c7233
    # Edits by joseph.rios@nasa.gov

    #MIT License
    #Copyright (c) 2017 Daniele Andreis
    #Permission is hereby granted, free of charge, to any person obtaining a copy
    #of this software and associated documentation files (the "Software"), to deal
    #in the Software without restriction, including without limitation the rights
    #to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    #copies of the Software, and to permit persons to whom the Software is
    #furnished to do so, subject to the following conditions:
    #
    #
    #The above copyright notice and this permission notice shall be included in all
    #copies or substantial portions of the Software.
    #
    #THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    #IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    #FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    #AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    #LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    #OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    #SOFTWARE.

    Point:
      type: object
      description: GeoJSon Point, limited to 2D.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.2
      properties:
        type:
          description: The type of Geometry. In this case, must be 'Point' per GeoJSON spec.
          type: string
          enum:
          - Point
        coordinates:
          $ref: '#/components/schemas/LonLatPair'

    Polygon:
      type: object
      required:
      - type
      - coordinates
      description: GeoJSon Polygon. Positions all 2D.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      properties:
        type:
          description: |
            The type of Geometry. In this case, must be 'Polygon' per GeoJSON
            spec.  Note that the "coordinates" member is validated to be be an
            array of size one. This implies there are no interior rings allowed
            currently.
          type: string
          enum:
          - Polygon
        coordinates:
          type: array
          description: >-
            The number of polygons allowed.  Currently 1, implying no interior
            rings.  If this number is changes, the maxItems should be considered.
            From RFC7946:
            o  For type "Polygon", the "coordinates" member MUST be an array of
            linear ring coordinate arrays.
            o  For Polygons with more than one of these rings, the first MUST be
            the exterior ring, and any others MUST be interior rings.  The
            exterior ring bounds the surface, and the interior rings (if
            present) bound holes within the surface.
            Again, note we only allow a single set of coordinates, implying no
            interior rings.
          minItems: 1
          maxItems: 1
          items:
            type: array
            description: >-
              The number of vertices in this polygon. From RFC7946:
                o  A linear ring is a closed LineString with four or more positions.
                o  The first and last positions are equivalent, and they MUST contain
                identical values; their representation SHOULD also be identical.
                o  A linear ring is the boundary of a surface or the boundary of a
                hole in a surface.
                o  A linear ring MUST follow the right-hand rule with respect to the
                area it bounds, i.e., exterior rings are counterclockwise, and
                holes are clockwise.  (also in the spec:  parsers SHOULD NOT reject
                Polygons that do not follow the right-hand rule.)
                https://tools.ietf.org/html/rfc7946#section-3.1.6
            minItems: 4
            maxItems: 100
            items:
              $ref: '#/components/schemas/Point'

    Circle:
      description: |-
        Local extension of the GeoJSON specification to add a circular area defined by a
        Point/Radius pair. We extend the Properties object to include a 'radius' value (see
        CircleProperties for details).
      required:
      - type
      - geometry
      - properties
      type: object
      properties:
        type:
          description: The type of Geometry. In this case, must be 'Feature' per GeoJSON spec.
          type: string
          enum:
          - Feature
        geometry:
          type: object
          properties:
            type:
              description: The type of Geometry. Must be Point.
              type: string
              enum:
              - Point
            coordinates:
              $ref: '#/components/schemas/Point'
        properties:
          $ref: '#/components/schemas/CircleProperties'

    #
    # End of GeoJSON definitions
    #

    Volume3D:
      description: |-
        A three-dimensional geographic volume consisting of a vertically-extruded shape.  Exactly one of
        `outline_polygon` or `outline_circle` must be specified.
      required:
      - altitude_lower
      - altitude_upper
      type: object
      properties:
        outline_circle:
          $ref: '#/components/schemas/Circle'
          description: A circular geographic shape on the surface of the earth.
        outline_polygon:
          $ref: '#/components/schemas/Polygon'
          description: A polygonal geographic shape on the surface of the earth.
        altitude_lower:
          description: Minimum bounding altitude of this volume.
          $ref: '#/components/schemas/Altitude'
        altitude_upper:
          description: Maximum bounding altitude of this volume.
          $ref: '#/components/schemas/Altitude'

    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
      - volume
      type: object
      properties:
        volume:
          $ref: '#/components/schemas/Volume3D'
        time_start:
          description: Beginning time of this volume.
          $ref: '#/components/schemas/Time'
        time_end:
          description: End time of this volume.
          $ref: '#/components/schemas/Time'

    ErrorResponse:
      description: |-
        Human-readable string returned when an error occurs
        as a result of a USS - DSS transaction.
      type: object
      properties:
        message:
          description: |-
            Human-readable message indicating what error occurred and/or why.
          type: string
          example: 'The error occurred because [...]'

    SubscriptionState:
      description: |-
        State of Subscription which is causing a notification to be sent.
      required:
      - subscription_id
      - notification_index
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/SubscriptionUUID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'

    SubscriberToNotify:
      description: |-
        Subscriber to notify of a change in the airspace.  This is provided by the DSS
        to a client changing the airspace, and it is the responsibility of that client
        to send a notification to the specified USS according to the change made to the
        airspace.
      required:
      - subscriptions
      - uss_base_url
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'

    Subscription:
      description: |-
        Specification of a geographic area that a client is interested
        in on an ongoing basis (e.g., "planning area").
      required:
      - id
      - version
      - notification_index
      - uss_base_url
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionUUID'
        version:
          description: |-
            Sequential version that the DSS increments every time the Subscription changes.  A USS
            must specify this version when modifying an existing Subscription to ensure consistency
            in read-modify-write operations and distributed systems.
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        time_start:
          description: |-
            If set, this subscription will not receive notifications involving airspace changes
            entirely before this time.
          $ref: '#/components/schemas/Time'
        time_end:
          description: |-
            If set, this subscription will not receive notifications involving airspace changes
            entirely after this time.
          $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_operations:
          description: If true, trigger notifications when Operations are created, updated, or deleted.  Otherwise, changes in Operations should not trigger notifications.
          type: boolean
          default: false
        notify_for_constraints:
          description: If true, trigger notifications when Constraints are created, updated, or deleted.  Otherwise, changes in Constraints should not trigger notifications.
          type: boolean
          default: false
        implicit_subscription:
          description: |-
            True if this Subscription was implicitly created by the DSS via the creation of an
            Operation, and should therefore be deleted by the DSS when that Operation is deleted.
          type: boolean
          default: false
        dependent_operations:
          description: List of Operations (UUIDs) that are dependent on this Subscription.
          type: array
          items:
            $ref: '#/components/schemas/EntityUUID'
          default: []

    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer
      minimum: 0
      exclusiveMinimum: false
      default: 0

    SearchSubscriptionParameters:
      description: |-
        Parameters for a request to find Subscriptions matching the provided criteria.
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'

    SearchSubscriptionsResponse:
      description: Response to DSS query for subscriptions in a particular geographic area.
      required:
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscriptions that overlap the specified geographic area.
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
          default: []

    GetSubscriptionResponse:
      description: Response to DSS request for the subscription with the given id.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    PutSubscriptionParameters:
      description: |-
        Parameters for a request to create/update a subscription in the DSS.
      required:
      - extents
      - old_version
      - uss_base_url
      type: object
      properties:
        extents:
          $ref: '#/components/schemas/Volume4D'
        old_version:
          description: |-
            To ensure consistency in read-modify-write operations and distributed systems, the client must
            specify the version of this Subscription in the DSS that it is attempting to modify.  If a new
            Subscription is being created, this version should be set to 0.
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          default: 0
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_operations:
          description: If true, trigger notifications when Operations are created, updated, or deleted.  Otherwise, changes in Operations should not trigger notifications.
          type: boolean
          default: false
        notify_for_constraints:
          description: If true, trigger notifications when Constraints are created, updated, or deleted.  Otherwise, changes in Constraints should not trigger notifications.
          type: boolean
          default: false

    SubscriptionUssBaseURL:
      description: |-
        The base URL of a USS implementation of the parts of the USS-USS API necessary for
        receiving the notifications requested by this Subscription.
      : '#/components/schemas/UssBaseURL'

    PutSubscriptionResponse:
      description: |-
        Response for a request to create or update a subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
        operations:
          description: |-
            Operations in or near the subscription area at the time of creation/update,
            if `notify_for_operations` is true
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'
          default: []
        constraints:
          description: |-
            Constraints in or near the subscription area at the time of creation/update,
            if `notify_for_constraints` is true
            was specified.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'
          default: []

    DeleteSubscriptionResponse:
      description: Response for a successful request to delete an Subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    UssBaseURL:
      description: |-
        The base URL of a USS implementation of part or all of the USS-USS API. Per the USS-USS API, the full URL
        of a particular resource can be constructed by appending, e.g., `/uss/v1/{resource}/{id}` to this base URL.
        Accordingly, this URL may not have a trailing '/' character.
      type: string
      example: 'https://utm_uss.com/utm'

    OperationState:
      description: |-
        State of an Operation.

        'Accepted': This Operation was fully deconflicted from other Entities at the time it changed to this
        state, but no aircraft associated with it are active yet.  The create or update request for this
        Operation must include a Key containing all OVNs for all relevant Entities.

        'Activated': One or more aircraft associated with this Operation are, or will imminently be, in
        flight.  The create or update request for this Operation must include a Key containing all OVNs for
        all relevant Entities.

        'NonConforming': This Operation is outside of the planned volume.  The new or updated volumes MUST
        contain the actual position of the aircraft.  In this state, the `/v1/operations/{entityuuid}/telemetry'
        USS-USS endpoint should respond, if available, to queries from USS peers.  The create or update request
        for this Operation may omit a Key in this case because the Operation is being adjusted as flown and
        cannot necessarily deconflict.

        'Contingent': This Operation is executing a contingency action, either because it has been
        NonConforming for a certain period of time, or because of operator initiation.  This state must
        transition to Ended.  The new or updated volumes MUST contain the actual position of the aircraft.
        In this state, the `/v1/operations/{entityuuid}/telemetry' USS-USS endpoint should respond, if available,
        to queries from USS peers.  The create or update request for this Operation may omit a Key in this
        case because the Operation is being adjusted as flown and cannot necessarily deconflict.

        'Ended': This Operation has ended (due to either an Operator-induced change or flight completion).
      type: string
      enum:
      - Accepted
      - Activated
      - NonConforming
      - Contingent
      - Ended

    OperationReference:
      description: |-
        The high-level information of a planned or active Operation with the URL
        of a USS to query for details.  Note: 'OVN' is returned ONLY to the USS that
        created the Operation but NEVER to other USS instances.
      required:
      - id
      - owner
      - version
      - time_start
      - time_end
      - uss_base_url
      - subscription_id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        owner:
          type: string
          example: 'uss1'
          description: |-
            Created by the DSS based on creating client's ID (via access token).  Used internal
            to the DSS for restricting mutation and deletion operations to owner.  Used by USSs
            to reject Operation update notifications originating from a USS that does not own
            the Operation.
        version:
          description: |-
            Sequential version that the DSS increments every time the Operation changes.  A USS
            may use this version to determine which Operation references have new details that
            must be retrieved.
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
        ovn:
          description: |-
            Opaque version number of this Operation.  Populated only when the OperationReference
            is owned by the USS retrieving or providing it.  Not populated when the
            OperationReference is not owned by the USS retrieving or providing it (instead, the
            USS must obtain the OVN from the details retrieved from the owning USS).
          $ref: '#/components/schemas/EntityOVN'
        time_start:
          description: Beginning time of Operation.
          $ref: '#/components/schemas/Time'
        time_end:
          description: End time of Operation.
          $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/OperationUssBaseURL'
        subscription_id:
          description: |-
            The ID of the Subscription that is ensuring the Operation owner receives relevant
            airspace updates.
          $ref: '#/components/schemas/SubscriptionUUID'

    OperationUssBaseURL:
      description: |-
        The base URL of a USS implementation that implements the parts of the USS-USS API necessary for
        providing the details of this Operation, and telemetry during non-conformance or contingency,
        if applicable.
      : '#/components/schemas/UssBaseURL'

    PutOperationReferenceParameters:
      description: |-
        Parameters for a request to create an OperationReference in the DSS.
        A subscription to changes overlapping this volume may be implicitly created, but
        this can be overridden by providing the (optional) 'subscription_id' to use.
        Note: The implicit subscription is managed by the DSS, not the USS.
      required:
      - extents
      - old_version
      - state
      - uss_base_url
      type: object
      properties:
        extents:
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          minItems: 1
        old_version:
          description: |-
            To ensure consistency in read-modify-write operations and distributed systems, the client must
            specify the version of this Operation in the DSS that it is attempting to modify.  If a new
            Operation is being created, this version should be set to 0.
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          default: 0
        key:
          description: |-
            Proof that the USS creating or mutating this Operation was aware of the current state of the
            airspace, with the expectation that this Operation is therefore deconflicted from all relevant
            features in the airspce.  This field is not required when declaring an Operation NonConforming
            or Contingent, or when there are no relevant Entities in the airspace, but is otherwise required.
            OVNs for Constraints are required if and only if the USS owning this Operation is considering
            Constraints, which is determined by whether the Subscription associated with this Operation
            triggers notifications for Constraints.
          $ref: '#/components/schemas/Key'
        state:
          $ref: '#/components/schemas/OperationState'
        uss_base_url:
          $ref: '#/components/schemas/OperationUssBaseURL'
        subscription_id:
          description: |-
            The ID of an existing Subscription that the USS will use to keep the operator informed about
            updates to relevant airspace information.  If this field is not provided, then the
            `new_subscription` field must be provided in order to provide notification capability
            for the Operation.  The Subscription specified by this ID must cover at least the area over
            which this Operation is conducted, and it must provide notifications for Operations.
          $ref: '#/components/schemas/EntityUUID'
        new_subscription:
          description: |-
            If an existing Subscription is not specified in `subscription_id`, then this field must be
            populated.  When this field is populated, an implicit Subscription will be created and
            associated with this Operation, and will generally be deleted automatically upon the
            deletion of this Operation.
          $ref: '#/components/schemas/ImplicitSubscriptionParameters'

    ImplicitSubscriptionParameters:
      description: |-
        Information necessary to create a Subscription to serve a single Operation's notification needs.
      type: object
      required:
      - uss_base_url
      properties:
        uss_base_url:
          description: |-
            The base URL of a USS implementation of the parts of the USS-USS API necessary for
            receiving the notifications that the Operation must be aware of.  This includes, at least,
            notifications for relevant changes in Operations.
          $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_constraints:
          description: |-
            True if this Operation's Subscription should trigger notifications when Constraints change.  Otherwise, changes in Constraints should not trigger notifications.
          type: boolean
          default: false

    GetOperationReferenceResponse:
      description: |-
        Response to DSS request for the OperationReference with the given ID.
      required:
      - operation_reference
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    ChangeOperationReferenceResponse:
      description: |-
        Response to a request to create, update, or delete an OperationReference
        in the DSS.
      required:
      - subscribers
      - operation_reference
      type: object
      properties:
        subscribers:
          description: |-
            DSS subscribers that this client now has the obligation to
            notify of the Operation changes just made.  This client must call POST
            for each provided URL according to the USS-USS `/v1/operations/{entityuuid}`
            path API.  The client's own Subscriptions will also be included in this list.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
          default: []
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    SearchOperationReferenceParameters:
      description: |-
        Parameters for a request to find OperationReferences matching the provided criteria.
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'

    SearchOperationReferenceResponse:
      description: Response to DSS query for OperationReferences in an area of interest.
      required:
      - operation_references
      type: object
      properties:
        operation_references:
          description: OperationReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'
          default: []

    ConstraintReference:
      description: A ConstraintReference (area in which a Constraint is present, along
        with other high-level information, but no details).  The DSS reports only
        these references and clients must exchange details and additional information
        peer-to-peer.
      required:
      - id
      - owner
      - version
      - time_start
      - time_end
      - uss_base_url
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        owner:
          type: string
          example: 'uss1'
          description: |-
            Created by the DSS based on creating client's ID (via access token).  Used internal
            to the DSS for restricting mutation and deletion operations to owner.  Used by USSs
            to reject Constraint update notifications originating from a USS that does not own
            the Constraint.
        version:
          description: |-
            Sequential version that the DSS increments every time the Constraint changes.  A USS
            may use this version to determine which Constraint references have new details that
            must be retrieved.
          type: integer
          format: int32
          minimum: 1
          exclusiveMinimum: false
        ovn:
          description: |-
            Opaque version number of this Constraint.  Populated only when the ConstraintReference
            is owned by the USS retrieving or providing it.  Not populated when the
            ConstraintReference is not owned by the USS retrieving or providing it (instead, the
            USS must obtain the OVN from the details retrieved from the owning USS).
          $ref: '#/components/schemas/EntityOVN'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/ConstraintUssBaseURL'

    ConstraintUssBaseURL:
      description: |-
        The base URL of a USS implementation that implements the parts of the USS-USS API necessary for
        providing the details of this Constraint.
      : '#/components/schemas/UssBaseURL'

    PutConstraintReferenceParameters:
      description: Parameters for a request to create/update a ConstraintReference in the
        DSS.
      required:
      - extents
      - old_version
      - uss_base_url
      type: object
      properties:
        extents:
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          minItems: 1
        old_version:
          description: |-
            To ensure consistency in read-modify-write operations and distributed systems, the client must
            specify the version of this Constraint in the DSS that it is attempting to modify.  If a new
            Constraint is being created, this version should be set to 0.
          type: integer
          format: int32
          minimum: 0
          exclusiveMinimum: false
          default: 0
        uss_base_url:
          $ref: '#/components/schemas/ConstraintUssBaseURL'

    GetConstraintReferenceResponse:
      description: Response to DSS request for the ConstraintReference with the given
        ID.
      required:
      - constraint_reference
      type: object
      properties:
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    ChangeConstraintReferenceResponse:
      description: Response to a request to create, update, or delete a ConstraintReference.
        in the DSS.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Constraint changes just made.  This client must call POST
            for each provided URL according to the USS-USS `/v1/constraints/{entityuuid}`
            path API.  The client's own Subscriptions will also be included in this list.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
          default: []
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    SearchConstraintReferenceParameters:
      description: |-
        Parameters for a request to find ConstraintReferences matching the provided criteria.
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'

    SearchConstraintReferencesResponse:
      description: Response to DSS query for ConstraintReferences in an area of interest.
      required:
      - constraint_references
      type: object
      properties:
        constraint_references:
          description: ConstraintReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'
          default: []

    EntityReference:
      description: Reference to a generic Entity known to the DSS.
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    AirspaceConflictResponse:
      description: Data provided when an airspace conflict was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string
        entity_conflicts:
          description: List of Entity references for which current proof of knowledge
            was not provided.  If this field is present and contains elements, the
            calling USS should query the details URLs for these Entities to obtain
            their details and correct OVNs.  The OVNs can be used to update
            the key, at which point the USS may retry this call.
          type: array
          items:
            $ref: '#/components/schemas/EntityReference'
          default: []

    ErrorReport:
      description: A report informing a server of a communication problem.
      required:
      - url
      - response_code
      - problem
      type: object
      properties:
        url:
          description: URL of request that resulted in an error.
          type: string
        headers:
          description: Set of headers included in request that resulted in an error.
          type: array
          items:
            type: string
          default: []
        body:
          description: Base64-encoded body content sent in request that resulted in an error.
          type: string
        response_code:
          type: integer
          format: int32
          description: HTTP response code encountered in error response.
        response_body:
          type: string
          description: Base64-encoded body content received in response that was in error.
        problem:
          type: string
          description: Human-readable description of the problem with the response.
        time_request:
          description: The time at which the problematic request was initiated.
          $ref: '#/components/schemas/Time'
        time_response:
          description: The time at which the problematic response was received.
          $ref: '#/components/schemas/Time'
        report_id:
          description: ID assigned by the server receiving the report.  Not populated when submitting a report.
          type: string
          maxLength: 128

    #
    # USS-USS schema components
    #
    OperationDetails:
      description: |-
        Details of a UTM Operation. Note that this data is not stored in the DSS; only with the clients.
      required:
      - volumes
      type: object
      properties:
        volumes:
          description: Volumes that wholly contain the Operation while being as small
            as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        state:
          $ref: '#/components/schemas/OperationState'
        vlos:
          description: If true, this Operation is ensuring deconfliction visually and volumes of other Operations may overlap the volumes of this Operation.
          type: boolean
          default: false


    Operation:
      description: Full description of a UTM Operation.
      required:
      - reference
      - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/OperationReference'
        details:
          $ref: '#/components/schemas/OperationDetails'

    PutOperationDetailsParameters:
      description: |-
        Parameters of a message informing of detailed information for a peer Operation.
        Pushed (by a client, not the DSS) directly to clients with subscriptions when
        another client makes a change to airspace within a cell with a subscription.
      required:
      - operation_id
      - subscriptions
      type: object
      properties:
        operation_id:
          description: ID of Operation that has changed.
          $ref: '#/components/schemas/EntityUUID'
        operation:
          description: |-
            Full information about the Operation that has changed.  If this field is omitted,
            the Operation was deleted.  A newly-created Operation can be differentiated from
            an updated Operation by examining the `version` field.  The `ovn` field in the
            nested `reference` must be populated.
          $ref: '#/components/schemas/Operation'
        subscriptions:
          type: array
          description: Subscription(s) prompting this notification.
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1

    GetOperationDetailsResponse:
      description: Response to peer request for the details of Operation with the given ID.
      required:
      - operation
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'

    ConstraintDetails:
      description: Details of a UTM Constraint. Note that this data is
        not stored in the DSS; only with the clients.
      required:
      - volumes
      type: object
      properties:
        volumes:
          description: Volumes that wholly contain the Constraint while being as small
            as practical.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        type:
          description: Type of airspace feature this Constraint represents.
          type: string
          example: 'NonUTMAircraftOperations'

    Constraint:
      description: Full specification of a UTM Constraint.
      required:
      - reference
      - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/ConstraintReference'
        details:
          $ref: '#/components/schemas/ConstraintDetails'

    PutConstraintDetailsParameters:
      description: Parameters of a message informing of new full information for a
        Constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions
        when another client makes a change to airspace within a cell with a subscription.
      required:
      - constraint_id
      - subscriptions
      type: object
      properties:
        constraint_id:
          description: ID of Constraint that has changed.
          $ref: '#/components/schemas/EntityUUID'
        constraint:
          description: |-
            Full information about the Constraint that has changed.  If this field is omitted,
            the Constraint was deleted.  A newly-created Constraint can be differentiated from
            an updated Constraint by examining the `version` field.  The `ovn` field in the
            nested `reference` must be populated.
          $ref: '#/components/schemas/Constraint'
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1

    GetConstraintDetailsResponse:
      description: |-
        Response to peer request for the details of Operation with the given ID.
      required:
      - constraint
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'

    GetOperationTelemetryResponse:
      description: Response to a peer request for telemetry of an off-nominal Operation.
      required:
      - telemetry
      type: object
      properties:
        telemetry:
          $ref: '#/components/schemas/VehicleTelemetry'

    VehicleTelemetry:
      description: Vehicle position, altitude, and velocity.
      required:
      - id
      - time_measured
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityUUID'
        position:
          $ref: '#/components/schemas/Position'
        velocity:
          $ref: '#/components/schemas/Velocity'
        time_measured:
          $ref: '#/components/schemas/Time'

    PositionAccuracyVertical:
      description: |-
        Vertical error that is likely to be present in this reported position.
        This is the GVA enumeration from ADS-B, plus some finer values for UAS.
      type: string
      enum:
      - VAUnknown
      - VA150mPlus
      - VA150m
      - VA45m
      - VA25m
      - VA10m
      - VA3m
      - VA1m

    PositionAccuracyHorizontal:
      description: |-
        Horizontal error that is likely to be present in this reported position.
        This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAS.
      type: string
      enum:
      - HAUnknown
      - HA10NMPlus
      - HA10NM
      - HA4NM
      - HA2NM
      - HA1NM
      - HA05NM
      - HA03NM
      - HA01NM
      - HA005NM
      - HA30m
      - HA10m
      - HA3m
      - HA1m

    Position:
      description: |-
        Location of the vehicle (UAS) as reported for UTM.
        Note: 'accuracy' values are required when extrapolated field is true
        and always in the entry for the current state.
      type: object
      properties:
        longitude:
          $ref: '#/components/schemas/Longitude'
        latitude:
          $ref: '#/components/schemas/Latitude'
        accuracy_h:
          $ref: '#/components/schemas/PositionAccuracyHorizontal'
        accuracy_v:
          $ref: '#/components/schemas/PositionAccuracyVertical'
        extrapolated:
          description: |-
            True if this position was generated primarily by computation
            rather than primarily from a direct instrument measurement.
            Assumed false if not specified.
          type: boolean
          default: false
        altitude:
          $ref: '#/components/schemas/Altitude'

    Velocity:
      required:
      - speed
      - units_speed
      type: object
      properties:
        speed:
          format: float
          type: number
          description: |-
            Ground speed in meters/second.
          example: 200.1
        units_speed:
          type: string
          enum:
          - MetersSecond
        track:
          format: float
          type: number
          description: |-
            Direction of flight expressed as a "True North-based" ground track angle.
            This value is provided in degrees East of North with a minimum resolution of 1 degree.
          example: 120

paths:
  #
  # DSS Endpoint: OPERATIONS
  #

  /dss/v1/operation_references/query:
    summary: Query all Operations in the DSS that intersect with a specified geographic area, altitude-range, and time-range.
    description: "Interface to Operation references in the DSS."

    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchOperationReferenceParameters'
        required: true
      tags:
      - "Operation references"
      - dss
      operationId: searchOpeationReferences
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Retrieve all Operation references in the specified area/volume/time from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOperationReferenceResponse'
          description: Operations were successfully retrieved.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /dss/v1/operation_references/{entityuuid}:
    summary: CRUD endpoint for a specified Operation reference in the DSS.
    parameters:
    - name: entityuuid
      description: EntityUUID of the Operation.
      schema:
        $ref: '#/components/schemas/EntityUUID'
      in: path
      required: true

    get:
      tags:
      - "Operation references"
      - dss
      operationId: getOpeationReference
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Retrieve the specified Operation reference from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationReferenceResponse'
          description: Operation reference was retrieved successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationReferenceParameters'
        required: true
      tags:
      - "Operation references"
      - dss
      operationId: updateOpeationReference
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Create/Update the specified Operation reference in the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: An Operation reference was updated successfully in the DSS.
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: An Operation reference was created successfully in the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Operation in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirspaceConflictResponse'
          description: |-
            * The provided key did not prove knowledge of all current and relevant airspace Entities
            * The provided `old_version` does not match the current version of the existing Operation.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    delete:
      tags:
      - "Operation references"
      - dss
      operationId: deleteOpeationReference
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Remove the specified Operation reference from the DSS.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: The specified Operation was successfully removed from the DSS.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Operation in a disallowed way.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.